/*
 * Copyright (C) 2006 Apple Inc.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

[
    Constructor(DOMString type, optional KeyboardEventInit eventInitDict),
    DoNotCheckConstants
] interface KeyboardEvent : UIEvent {

    const unsigned long DOM_KEY_LOCATION_STANDARD = 0x00;
    const unsigned long DOM_KEY_LOCATION_LEFT = 0x01;
    const unsigned long DOM_KEY_LOCATION_RIGHT = 0x02;
    const unsigned long DOM_KEY_LOCATION_NUMPAD = 0x03;

    [Conditional=KEYBOARD_KEY_ATTRIBUTE] readonly attribute DOMString key;
    [Conditional=KEYBOARD_CODE_ATTRIBUTE] readonly attribute DOMString code;
    readonly attribute unsigned long location;

    readonly attribute boolean ctrlKey;
    readonly attribute boolean shiftKey;
    readonly attribute boolean altKey;
    readonly attribute boolean metaKey;

    readonly attribute boolean repeat;
    readonly attribute boolean isComposing;

    boolean getModifierState(DOMString keyArg);

    // Everything below is legacy.
    readonly attribute DOMString keyIdentifier;
    [ImplementedAs=location] readonly attribute unsigned long keyLocation;
    readonly attribute boolean altGraphKey;
    readonly attribute unsigned long charCode;
    readonly attribute unsigned long keyCode;
    readonly attribute unsigned long which;

    // FIXME: this does not match the version in the DOM spec.
    // FIXME: Using "undefined" as default parameter value is wrong.
    void initKeyboardEvent(optional DOMString type = "undefined", optional boolean canBubble = false, optional boolean cancelable = false,
        optional WindowProxy? view = null, optional DOMString keyIdentifier = "undefined", optional unsigned long location = 0,
        optional boolean ctrlKey = false, optional boolean altKey = false, optional boolean shiftKey = false, optional boolean metaKey = false, optional boolean altGraphKey = false);

    const long VK_ENTER = 13;
    const long VK_LEFT = 37;
    const long VK_UP = 38;
    const long VK_RIGHT = 39;
    const long VK_DOWN = 40;
    const long VK_SPACE = 32;
    const long VK_BACK_SPACE = 8;
    const long VK_0 = 48;
    const long VK_1 = 49;
    const long VK_2 = 50;
    const long VK_3 = 51;
    const long VK_4 = 52;
    const long VK_5 = 53;
    const long VK_6 = 54;
    const long VK_7 = 55;
    const long VK_8 = 56;
    const long VK_9 = 57;
    const long VK_A = 65;
    const long VK_B = 66;
    const long VK_C = 67;
    const long VK_D = 68;
    const long VK_E = 69;
    const long VK_F = 70;
    const long VK_G = 71;
    const long VK_H = 72;
    const long VK_I = 73;
    const long VK_J = 74;
    const long VK_K = 75;
    const long VK_L = 76;
    const long VK_M = 77;
    const long VK_N = 78;
    const long VK_O = 79;
    const long VK_P = 80;
    const long VK_Q = 81;
    const long VK_R = 82;
    const long VK_S = 83;
    const long VK_T = 84;
    const long VK_U = 85;
    const long VK_V = 86;
    const long VK_W = 87;
    const long VK_X = 88;
    const long VK_Y = 89;
    const long VK_Z = 90;
    const long VK_RED = 403;
    const long VK_GREEN = 404;
    const long VK_YELLOW = 405;
    const long VK_BLUE = 406;
    const long VK_HELP = 47;
    const long VK_PLAY = 250;
    const long VK_PAUSE = 19;
    const long VK_PLAY_PAUSE = 179;
    const long VK_STOP = 178;
    const long VK_FAST_FWD = 228;
    const long VK_REWIND = 227;
    const long VK_BACK = 27;
    const long VK_CONTEXT_MENU = 93;
};

dictionary KeyboardEventInit : EventModifierInit {
    DOMString key = "";
    DOMString code = "";
    unsigned long location = 0;
    boolean repeat = false;
    boolean isComposing = false;

    // This members are not in the specification but are needed to initialize the corresponding legacy
    // attributes we still support on KeyboardEvent for backward compatibility.
    DOMString keyIdentifier = "";
    unsigned long keyLocation;
    unsigned long charCode = 0;
    unsigned long keyCode = 0;
    unsigned long which = 0;
};
